using System;
using System.Collections.Generic;
using Beamable.Common;
using Beamable.Go4.Nfc.Common;
using Beamable.Go4.Nfc.Microservices;
using Beamable.Server;
using MongoDB.Driver;
using UnityEngine;
using Task = System.Threading.Tasks.Task;

namespace Beamable.Microservices
{
	[Microservice(
		"Go4_PaymentService", 
		CustomAutoGeneratedClientPath = "Packages/com.beamable.go4.nfc/AutoGenerated")]
	public class Go4_PaymentService : Microservice
	{

		[ConfigureServices]
		public static void Configure(IServiceBuilder builder)
		{
			// these services are shared for all requests
			builder.AddNfcPaymentServices();
		}

		[InitializeServices]
		public static void Init(IServiceInitializer initializer)
		{
			initializer.StartBatcher();
		}
		
		
		[ClientCallable]
		[SwaggerCategory("Payment")]
		public async Promise<MagtekBeginPaymentResponse> BeginNfcPayment(MagtekBeginPaymentRequest request)
		{
			var api = Provider.GetService<NfcPaymentService>();
			var res = await api.BeginNfcPayment(Context.UserId, request);
			
			return res;
		}

		[ClientCallable]
		[SwaggerCategory("Payment")]
		public async Promise<MagtekFinishPaymentResponse> FinishNfcPayment(MagtekFinishPaymentRequest request)
		{
			var api = Provider.GetService<NfcPaymentService>();
			var res = await api.FinishNfcPayment(Services.Inventory, request);
			return res;
		}
		
		

		[AdminOnlyCallable]
		[SwaggerCategory("Payment/Admin")]
		public async Promise<MagtekFinishPaymentResponse> Admin_ForceFulfillNfcPayment(string paymentId)
		{
			var api = Provider.GetService<NfcPaymentService>();
			return await api.ForceFulfillNfcPayment(gamerTag => AssumeUser(gamerTag).Services.Inventory, paymentId);
		}
		
		[AdminOnlyCallable]
		[SwaggerCategory("Payment/Admin")]
		public async Promise<MagtekRefundResponse> Admin_RefundNfcPayment(string paymentId)
		{
			var api = Provider.GetService<NfcPaymentService>();
			return await api.RefundNfcPayment(paymentId);
		}
		
		[AdminOnlyCallable]
		[SwaggerCategory("Payment/Admin")]
		public async Promise<List<NfcPaymentDocument>> Admin_GetPlayerPayments(long gamerTag, int offset, int limit)
		{
			var api = Provider.GetService<NfcPaymentService>();
			return await api.GetPlayerPayments(gamerTag, offset, limit);
		}
		
		[AdminOnlyCallable]
		[SwaggerCategory("Payment/Admin")]
		public async Promise<List<NfcPaymentDocument>> Admin_GetPayment(string paymentId)
		{
			var api = Provider.GetService<NfcPaymentService>();
			return await api.GetPayment(paymentId);
		}
		
		[AdminOnlyCallable]
		[SwaggerCategory("Payment/Admin")]
		public async Promise<List<NfcPaymentEventDocument>> Admin_GetPaymentAuditTrail(string paymentId)
		{
			var api = Provider.GetService<NfcPaymentEventBatcher>();
			return await api.GetAudits(paymentId);
		}
		

		[ClientCallable]
		public async Promise<string> TestConcurrency()
		{
			var storage = await Storage.PaymentStorageCollection<TestDocument>();

			var doc = new TestDocument();
			await storage.InsertOneAsync(doc);

			var tasks = new List<Task>();
			int failedCount = 0;
			int successCount = 0;
			int runCount = 0;
			for (var i = 0; i < 1000; i++)
			{
				var index = i;
				var t= Task.Run(async () =>
				{
					System.Threading.Interlocked.Increment(ref runCount);

					await Task.Delay(1000 - index);
					
						var res = await storage.FindOneAndUpdateAsync(
							filter: Builders<TestDocument>.Filter.And(
								Builders<TestDocument>.Filter.Eq(x => x.Id, doc.Id),
								Builders<TestDocument>.Filter.Eq(x => x.count, 0)),
							update: Builders<TestDocument>.Update.Inc(x => x.count, 1));


						if (res == null)
						{
							System.Threading.Interlocked.Increment(ref failedCount);

						}
						else
						{
							System.Threading.Interlocked.Increment(ref successCount);

						}
						
						
				});
				tasks.Add(t);
			}

			await Task.WhenAll(tasks);

			return $"{runCount}/{tasks.Count} || {successCount}/{failedCount} = {successCount+failedCount}";
		}
		
	}
}
