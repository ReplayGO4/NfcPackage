//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace DynaProx.MPPGv4Service
{
    using System.Runtime.Serialization;
#if BEAMABLE_MICROSERVICE

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "1.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.magensa.net/MPPGv4/", ConfigurationName="DynaProx.MPPGv4Service.IMPPGv4Service")]
    public interface IMPPGv4Service
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.magensa.net/MPPGv4/IMPPGv4Service/ProcessCardSwipe", ReplyAction="http://www.magensa.net/MPPGv4/IMPPGv4Service/ProcessCardSwipeResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DynaProx.MPPGv4Service.MPPGv4WSFault), Action="http://www.magensa.net/MPPGv4/IMPPGv4Service/ProcessCardSwipeMPPGv4WSFaultFault", Name="MPPGv4WSFault", Namespace="http://schemas.datacontract.org/2004/07/MPPGv4WS.Core")]
        System.Threading.Tasks.Task<DynaProx.MPPGv4Service.ProcessCardSwipeResponse[]> ProcessCardSwipeAsync(DynaProx.MPPGv4Service.ProcessCardSwipeRequest[] ProcessCardSwipeRequests);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.magensa.net/MPPGv4/IMPPGv4Service/ProcessReferenceID", ReplyAction="http://www.magensa.net/MPPGv4/IMPPGv4Service/ProcessReferenceIDResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DynaProx.MPPGv4Service.MPPGv4WSFault), Action="http://www.magensa.net/MPPGv4/IMPPGv4Service/ProcessReferenceIDMPPGv4WSFaultFault" +
            "", Name="MPPGv4WSFault", Namespace="http://schemas.datacontract.org/2004/07/MPPGv4WS.Core")]
        System.Threading.Tasks.Task<DynaProx.MPPGv4Service.ProcessReferenceIDResponse[]> ProcessReferenceIDAsync(DynaProx.MPPGv4Service.ProcessReferenceIDRequest[] ProcessReferenceIDRequests);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.magensa.net/MPPGv4/IMPPGv4Service/ProcessManualEntry", ReplyAction="http://www.magensa.net/MPPGv4/IMPPGv4Service/ProcessManualEntryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DynaProx.MPPGv4Service.MPPGv4WSFault), Action="http://www.magensa.net/MPPGv4/IMPPGv4Service/ProcessManualEntryMPPGv4WSFaultFault" +
            "", Name="MPPGv4WSFault", Namespace="http://schemas.datacontract.org/2004/07/MPPGv4WS.Core")]
        System.Threading.Tasks.Task<DynaProx.MPPGv4Service.ProcessManualEntryResponse[]> ProcessManualEntryAsync(DynaProx.MPPGv4Service.ProcessManualEntryRequest[] ProcessManualEntryRequests);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.magensa.net/MPPGv4/IMPPGv4Service/ProcessToken", ReplyAction="http://www.magensa.net/MPPGv4/IMPPGv4Service/ProcessTokenResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DynaProx.MPPGv4Service.MPPGv4WSFault), Action="http://www.magensa.net/MPPGv4/IMPPGv4Service/ProcessTokenMPPGv4WSFaultFault", Name="MPPGv4WSFault", Namespace="http://schemas.datacontract.org/2004/07/MPPGv4WS.Core")]
        System.Threading.Tasks.Task<DynaProx.MPPGv4Service.ProcessTokenResponse[]> ProcessTokenAsync(DynaProx.MPPGv4Service.ProcessTokenRequest[] ProcessTokenRequests);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.magensa.net/MPPGv4/IMPPGv4Service/ProcessData", ReplyAction="http://www.magensa.net/MPPGv4/IMPPGv4Service/ProcessDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DynaProx.MPPGv4Service.MPPGv4WSFault), Action="http://www.magensa.net/MPPGv4/IMPPGv4Service/ProcessDataMPPGv4WSFaultFault", Name="MPPGv4WSFault", Namespace="http://schemas.datacontract.org/2004/07/MPPGv4WS.Core")]
        System.Threading.Tasks.Task<DynaProx.MPPGv4Service.ProcessDataResponse[]> ProcessDataAsync(DynaProx.MPPGv4Service.ProcessDataRequest[] ProcessDataRequests);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.magensa.net/MPPGv4/IMPPGv4Service/ProcessKeyPadEntry", ReplyAction="http://www.magensa.net/MPPGv4/IMPPGv4Service/ProcessKeyPadEntryResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DynaProx.MPPGv4Service.MPPGv4WSFault), Action="http://www.magensa.net/MPPGv4/IMPPGv4Service/ProcessKeyPadEntryMPPGv4WSFaultFault" +
            "", Name="MPPGv4WSFault", Namespace="http://schemas.datacontract.org/2004/07/MPPGv4WS.Core")]
        System.Threading.Tasks.Task<DynaProx.MPPGv4Service.ProcessKeyPadEntryResponse[]> ProcessKeyPadEntryAsync(DynaProx.MPPGv4Service.ProcessKeyPadEntryRequest[] ProcessKeyPadEntryRequests);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.magensa.net/MPPGv4/IMPPGv4Service/GetProcessorReport", ReplyAction="http://www.magensa.net/MPPGv4/IMPPGv4Service/GetProcessorReportResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DynaProx.MPPGv4Service.MPPGv4WSFault), Action="http://www.magensa.net/MPPGv4/IMPPGv4Service/GetProcessorReportMPPGv4WSFaultFault" +
            "", Name="MPPGv4WSFault", Namespace="http://schemas.datacontract.org/2004/07/MPPGv4WS.Core")]
        System.Threading.Tasks.Task<DynaProx.MPPGv4Service.GetProcessorReportResponse[]> GetProcessorReportAsync(DynaProx.MPPGv4Service.GetProcessorReportRequest[] GetProcessorReportRequests);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.magensa.net/MPPGv4/IMPPGv4Service/ProcessInAppApplePay", ReplyAction="http://www.magensa.net/MPPGv4/IMPPGv4Service/ProcessInAppApplePayResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DynaProx.MPPGv4Service.MPPGv4WSFault), Action="http://www.magensa.net/MPPGv4/IMPPGv4Service/ProcessInAppApplePayMPPGv4WSFaultFau" +
            "lt", Name="MPPGv4WSFault", Namespace="http://schemas.datacontract.org/2004/07/MPPGv4WS.Core")]
        System.Threading.Tasks.Task<DynaProx.MPPGv4Service.ProcessInAppApplePayResponse[]> ProcessInAppApplePayAsync(DynaProx.MPPGv4Service.ProcessInAppApplePayRequest[] ProcessInAppApplePayRequests);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.magensa.net/MPPGv4/IMPPGv4Service/ProcessTECApplePay", ReplyAction="http://www.magensa.net/MPPGv4/IMPPGv4Service/ProcessTECApplePayResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DynaProx.MPPGv4Service.MPPGv4WSFault), Action="http://www.magensa.net/MPPGv4/IMPPGv4Service/ProcessTECApplePayMPPGv4WSFaultFault" +
            "", Name="MPPGv4WSFault", Namespace="http://schemas.datacontract.org/2004/07/MPPGv4WS.Core")]
        System.Threading.Tasks.Task<DynaProx.MPPGv4Service.ProcessTECApplePayResponse[]> ProcessTECApplePayAsync(DynaProx.MPPGv4Service.ProcessTECApplePayRequest[] ProcessTECApplePayRequests);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.magensa.net/MPPGv4/IMPPGv4Service/ProcessGooglePay", ReplyAction="http://www.magensa.net/MPPGv4/IMPPGv4Service/ProcessGooglePayResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DynaProx.MPPGv4Service.MPPGv4WSFault), Action="http://www.magensa.net/MPPGv4/IMPPGv4Service/ProcessGooglePayMPPGv4WSFaultFault", Name="MPPGv4WSFault", Namespace="http://schemas.datacontract.org/2004/07/MPPGv4WS.Core")]
        System.Threading.Tasks.Task<DynaProx.MPPGv4Service.ProcessGooglePayResponse[]> ProcessGooglePayAsync(DynaProx.MPPGv4Service.ProcessGooglePayRequest[] ProcessGooglePayRequests);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "1.0.0")]
    public interface IMPPGv4ServiceChannel : DynaProx.MPPGv4Service.IMPPGv4Service, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "1.0.0")]
    public partial class MPPGv4ServiceClient : System.ServiceModel.ClientBase<DynaProx.MPPGv4Service.IMPPGv4Service>, DynaProx.MPPGv4Service.IMPPGv4Service, IStandardMPPGv4Service
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public MPPGv4ServiceClient() : 
                base(MPPGv4ServiceClient.GetDefaultBinding(), MPPGv4ServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IMPPGv4Service.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MPPGv4ServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(MPPGv4ServiceClient.GetBindingForEndpoint(endpointConfiguration), MPPGv4ServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MPPGv4ServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(MPPGv4ServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MPPGv4ServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(MPPGv4ServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MPPGv4ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<DynaProx.MPPGv4Service.ProcessCardSwipeResponse[]> ProcessCardSwipeAsync(DynaProx.MPPGv4Service.ProcessCardSwipeRequest[] ProcessCardSwipeRequests)
        {
            return base.Channel.ProcessCardSwipeAsync(ProcessCardSwipeRequests);
        }
        
        public System.Threading.Tasks.Task<DynaProx.MPPGv4Service.ProcessReferenceIDResponse[]> ProcessReferenceIDAsync(DynaProx.MPPGv4Service.ProcessReferenceIDRequest[] ProcessReferenceIDRequests)
        {
            return base.Channel.ProcessReferenceIDAsync(ProcessReferenceIDRequests);
        }
        
        public System.Threading.Tasks.Task<DynaProx.MPPGv4Service.ProcessManualEntryResponse[]> ProcessManualEntryAsync(DynaProx.MPPGv4Service.ProcessManualEntryRequest[] ProcessManualEntryRequests)
        {
            return base.Channel.ProcessManualEntryAsync(ProcessManualEntryRequests);
        }
        
        public System.Threading.Tasks.Task<DynaProx.MPPGv4Service.ProcessTokenResponse[]> ProcessTokenAsync(DynaProx.MPPGv4Service.ProcessTokenRequest[] ProcessTokenRequests)
        {
            return base.Channel.ProcessTokenAsync(ProcessTokenRequests);
        }
        
        public System.Threading.Tasks.Task<DynaProx.MPPGv4Service.ProcessDataResponse[]> ProcessDataAsync(DynaProx.MPPGv4Service.ProcessDataRequest[] ProcessDataRequests)
        {
            return base.Channel.ProcessDataAsync(ProcessDataRequests);
        }
        
        public System.Threading.Tasks.Task<DynaProx.MPPGv4Service.ProcessKeyPadEntryResponse[]> ProcessKeyPadEntryAsync(DynaProx.MPPGv4Service.ProcessKeyPadEntryRequest[] ProcessKeyPadEntryRequests)
        {
            return base.Channel.ProcessKeyPadEntryAsync(ProcessKeyPadEntryRequests);
        }
        
        public System.Threading.Tasks.Task<DynaProx.MPPGv4Service.GetProcessorReportResponse[]> GetProcessorReportAsync(DynaProx.MPPGv4Service.GetProcessorReportRequest[] GetProcessorReportRequests)
        {
            return base.Channel.GetProcessorReportAsync(GetProcessorReportRequests);
        }
        
        public System.Threading.Tasks.Task<DynaProx.MPPGv4Service.ProcessInAppApplePayResponse[]> ProcessInAppApplePayAsync(DynaProx.MPPGv4Service.ProcessInAppApplePayRequest[] ProcessInAppApplePayRequests)
        {
            return base.Channel.ProcessInAppApplePayAsync(ProcessInAppApplePayRequests);
        }
        
        public System.Threading.Tasks.Task<DynaProx.MPPGv4Service.ProcessTECApplePayResponse[]> ProcessTECApplePayAsync(DynaProx.MPPGv4Service.ProcessTECApplePayRequest[] ProcessTECApplePayRequests)
        {
            return base.Channel.ProcessTECApplePayAsync(ProcessTECApplePayRequests);
        }
        
        public System.Threading.Tasks.Task<DynaProx.MPPGv4Service.ProcessGooglePayResponse[]> ProcessGooglePayAsync(DynaProx.MPPGv4Service.ProcessGooglePayRequest[] ProcessGooglePayRequests)
        {
            return base.Channel.ProcessGooglePayAsync(ProcessGooglePayRequests);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMPPGv4Service))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMPPGv4Service))
            {
                return new System.ServiceModel.EndpointAddress("https://mppg.magensa.net/v4/MPPGv4Service.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return MPPGv4ServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IMPPGv4Service);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return MPPGv4ServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IMPPGv4Service);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IMPPGv4Service,
        }
    }

#endif

}
